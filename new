/*
 * This is the page class for New user registration.
 * All the methods defined here can be re-used to find the web element in new user registration form and perform actions.
 * To verify new user registration is success or not
 */


package pageObjectsPackage;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Reporter;


public class NewUserRegistrationPage {
	public static WebElement element = null;
	
	public static void newUserRegistrationLink(WebDriver driver) {
		element = driver.findElement(By.xpath("//a[@href='register.jsp']"));
		element.click();
	}
	
	public static void fillUserName(WebDriver driver, String username) {
		element = driver.findElement(By.id("login"));
		element.sendKeys(username);
	}

	public static void fillPassword(WebDriver driver, String Password) {
		element = driver.findElement(By.id("password1"));
		element.sendKeys(Password);
	}
	
	public static void repeatPassword(WebDriver driver, String Password) {
		element = driver.findElement(By.id("password2"));
		element.sendKeys(Password);
	}
	
	public static void clickLogin(WebDriver driver) {
		element = driver.findElement(By.id("submit"));
		element.click();
   }
	
	//Log out button is searched to verify whether new user registration success or not. 
	public static void verifyRegistration(WebDriver driver) {
		element = driver.findElement(By.id("logout"));
		Reporter.log("Log out button found with id, New user registration is successful", true);
		
	}
	
	
	/*This is the method that can be re used to create new user account and verify whether new
	user registration success or not.*/
	public static void newUserRegistration(WebDriver driver,
			String username, String password1, String password2) {
		newUserRegistrationLink(driver);
		fillUserName(driver, username);
		fillPassword(driver, password1);
		repeatPassword(driver, password2);
		clickLogin(driver);
		verifyRegistration(driver);
   }
}
/*
 * This is the page class for login page.
 * All the methods defined here can be re-used to find the web element in login page and perform actions.
 */

package pageObjectsPackage;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Reporter;



public class LoginPage {
	public static WebElement element = null;

	public static void fillUserName(WebDriver driver, String username) {
		element = driver.findElement(By.id("login"));
		element.sendKeys(username);
	}

	public static void fillPassword(WebDriver driver, String Password) {
		element = driver.findElement(By.id("password"));
		element.sendKeys(Password);
	}
	
	public static void clickLoginButton(WebDriver driver) {
		driver.findElement(By.id("submit")).click();
   }
	
//	Log out button is searched to verify whether the user login is success or not.
	public static void verifyLogin(WebDriver driver) {
		element = driver.findElement(By.id("logout"));
		Reporter.log("Login with valid credentials is successful", true);
	}
	
	
	/*
	 This is the method that can be re-used to login to expense tracker with valid
	 credentials and verify.
	 */
	public static void loginToExpenseTracker(WebDriver driver, String username, String password) {
		fillUserName(driver, username);
		fillPassword(driver, password);
		clickLoginButton(driver);
		verifyLogin(driver);
   }
}

/*
 * This is the page class for List expenses page.
 * All the methods defined here can be re-used to find the web element in list expenses page and perform actions.
 * Here methods are defined to edit, delete and extract the expenses information.
 */

package pageObjectsPackage;


import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.Alert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Reporter;
import org.openqa.selenium.By;


public class ListExpensesPage {
	
	public static WebElement element = null;
	
//	Method to edit the listed expenses
	public static void editListedExpenses(WebDriver driver) {
		try{
			List<WebElement> listedExpense = driver.findElements(
					By.xpath("//*[@title='edit expense']"));
			int size = listedExpense.size();
			for (int i=0; i<size;) {
				listedExpense.get(i).click();
				Reporter.log("clicked to edit the listed expenses");
			}
		}
		catch (Exception e) {
			}	
		}
	
	
//	Method to delete the listed expenses
	public static void deleteListedExpenses(WebDriver driver) {
		try{
			List<WebElement> listedExpense = driver.findElements(
					By.xpath("//*[@title='delete expense']"));
			int size = listedExpense.size();
			for (int i=0; i<size;) {
				listedExpense.get(i).click();
				Reporter.log("clicked to delete the listed expenses");	
			}	
		}
		catch (Exception e) {
			}
		Alert alert = driver.switchTo().alert();
		Reporter.log("pop up alert before deleting");
		alert.accept();
		Reporter.log("Accepted alert message and delete successful");
		}
	
	
//	Method to extract the listed expenses and verify expenses
	public static void ListExpenses(WebDriver driver) {
		driver.findElement(By.id("go_list_expenses")).click();
		WebElement table_element = driver.findElement(By.xpath("//table[@class='table']"));
		Reporter.log("List of expenses are :", true);
	    ArrayList<WebElement> rows = (ArrayList<WebElement>) table_element.findElements(By.tagName("tr"));
	    for (WebElement row : rows) {
	        ArrayList<WebElement> cells = (ArrayList<WebElement>) row.findElements(By.tagName("td"));
	        for (WebElement cell : cells) {
	            Reporter.log(cell.getText(), true);
	        }
	    }
	}
	
}

/*
 * This is the page class for List Category page.
 * All the methods defined here can be re-used to find the web element in list category page and perform actions.
 * Adding new categories of expenses, editing and deleting the categories of expenses
 */

package pageObjectsPackage;


import java.util.List;
import org.openqa.selenium.Alert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Reporter;
import org.openqa.selenium.By;



public class ListCategoryPage {
	public static WebElement element = null;
	
	public static void clickListCategoryPage(WebDriver driver) {
		driver.findElement(By.id("go_list_categories")).click();
	}
	
	public static void clickAddtCategoryPage(WebDriver driver) {
		driver.findElement(By.id("go_add_category")).click();
	}
	
	public static void fillcategory(WebDriver driver, String str1) {
		element = driver.findElement(By.id("name"));
		element.clear();
		element.sendKeys(str1);
	}
	
	public static void clickSaveCategoryPage(WebDriver driver) {
		driver.findElement(By.id("submit")).click();
	}
	
	public static void editListedCategory(WebDriver driver) {
		try{
			List<WebElement> listedExpense = driver.findElements(
					By.xpath("//*[@title='edit category']"));
			int size = listedExpense.size();
			for (int i=0; i<size;) {
				listedExpense.get(i).click();
				Reporter.log("clicked to edit the listed category");
			}
		}
		catch (Exception e) {
			}	
		}
	
	public static void deleteListedCategory(WebDriver driver) {
		try{
			List<WebElement> listedExpense = driver.findElements(
					By.xpath("//*[@title='delete category']"));
			int size = listedExpense.size();
			for (int i=0; i<size;) {
				listedExpense.get(i).click();
				Reporter.log("clicked to delete the listed category");	
			}	
		}
		catch (Exception e) {
			}
		Alert alert = driver.switchTo().alert();
		Reporter.log("pop up alert before deleting");
		alert.accept();
		Reporter.log("Accepted alert message and delete successful");
		}
	
	
	
//	This method is used to add the categories of expenses
	public static void listCategories(WebDriver driver, String str1) {
		clickListCategoryPage(driver);
		clickAddtCategoryPage(driver);
		fillcategory(driver, str1);
		clickSaveCategoryPage(driver);
	}
	
	
//	This method is used to edit the categories of expenses
	public static void editCategories(WebDriver driver, String str1) {
		clickListCategoryPage(driver);
		editListedCategory(driver);
		fillcategory(driver, str1);
		clickSaveCategoryPage(driver);

	}
	
	
//	This method is used to delete the categories of expenses
	public static void deleteCategories(WebDriver driver) {
		ListCategoryPage.clickListCategoryPage(driver);
		ListCategoryPage.deleteListedCategory(driver);
	}
}

/*
 * This is the page class for Edit user account page.
 * All the methods defined here can be re-used to find the web element in Edit user account page and perform actions.
 * All the functionalities related user account details are verified as per the given user story-008
 */

package pageObjectsPackage;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.Reporter;


public class EditUserAccount {
	public static WebElement element = null;

	public static void findEditAccountlink(WebDriver driver) {
		driver.findElement(By.id("editaccount")).click();
	}

	public static void provideExistingPassword(WebDriver driver, String password) {
		element = driver.findElement(By.id("password"));
		element.clear();
		element.sendKeys(password);
	}
	
	public static void provideNewPassword(WebDriver driver, String password1) {
		element = driver.findElement(By.id("newpassword1"));
		element.clear();
		element.sendKeys(password1);
	}
	
	public static void confirmNewPassword(WebDriver driver, String password2) {
		element = driver.findElement(By.id("newpassword2"));
		element.clear();
		element.sendKeys(password2);
	}
	
	public static void clickUpdateaccount(WebDriver driver) {
		element = driver.findElement(By.id("submit"));
		element.click();
		try{
			Alert alert = driver.switchTo().alert();
			Reporter.log("pop up alert displaying error message: 'Error: New Passwords aren't equal!'");
			alert.accept();
			Reporter.log("user account edit is not successful");
			
		}
		catch (Exception e){
		}

   }
	
	
	
	
	/*
	 *1) While editing the url : http://thawing-shelf-73260.herokuapp.com/editaccount.jsp
	 *2) After edit account is successful, url changes to : http://thawing-shelf-73260.herokuapp.com/listexpenses 
	 * these urls are used to verify whether user account details are modified successfully or not.
	 */
	public static void verifyEditAccount(WebDriver driver) {
		String currentUrl = driver.getCurrentUrl();
		Assert.assertEquals(currentUrl, "http://thawing-shelf-73260.herokuapp.com/listexpenses");
		Reporter.log("user account edit is successful with valid inputs");
		
   }
	
	
	
//	This is the method to validate user account details
	public static void editUserAccount(WebDriver driver, String password, 
			String password1, String password2) {
		findEditAccountlink(driver);
		provideExistingPassword(driver, password);
		provideNewPassword(driver, password1);
		confirmNewPassword(driver, password2);
		clickUpdateaccount(driver);
		verifyEditAccount(driver);
   }
	
	
//	This method is used for proving that the user name cannot be edited/modified
	public static void validateEditUserName(WebDriver driver, String username) {
		findEditAccountlink(driver);
		element = driver.findElement(By.name("login"));
		Reporter.log("Is user name is enabled to edit ? : " +element.isEnabled(), true);
		Reporter.log("User Name cannot be modified", true);
		element.click();
	}
		
}

/*
 * This is the page class for add expenses page.
 * All the methods defined here can be re-used to find the web element and perform actions.
 */

package pageObjectsPackage;


import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import org.testng.Reporter;


public class AddExpensesPage {
	public static WebElement element = null;

	public static void goToAddExpensePage(WebDriver driver) {
		driver.findElement(By.id("go_add_expense")).click();
	}
	
	public static void fillDay(WebDriver driver, String str1) {
		element = driver.findElement(By.id("day"));
		element.clear();
		element.sendKeys(str1);
	}
	
	public static void fillMonth(WebDriver driver, String str1) {
		element = driver.findElement(By.id("month"));
		element.clear();
		element.sendKeys(str1);
	}
	
	public static void fillYear(WebDriver driver, String str1) {
		element = driver.findElement(By.id("year"));
		element.clear();
		element.sendKeys(str1);
	}
	
	public static void selectCategory(WebDriver driver, String str1) {
		element = driver.findElement(By.id("category"));
		Select sel = new Select(element);
		sel.selectByVisibleText(str1);
	}
	
	public static void fillAmount(WebDriver driver, String str1) {
		element = driver.findElement(By.id("amount"));
		element.clear();
		element.sendKeys(str1);
	}

	public static void fillReason(WebDriver driver, String str1) {
		element = driver.findElement(By.id("reason"));
		element.clear();
		element.sendKeys(str1);
	}
	
	public static void clickCreateExpense(WebDriver driver) {
		driver.findElement(By.id("submit")).click();
	}
	
	public static void editListedExpenses(WebDriver driver) {
		try{
			List<WebElement> listedExpense = driver.findElements(
					By.xpath("//*[@title='edit expense']"));
			int size = listedExpense.size();
			Reporter.log("Size of the list: " + size, true);
			for (int i=0; i<size;) {
				listedExpense.get(i).click();
				Reporter.log("clicked to edit the listed expenses");
			}
		}
		catch (Exception e) {
			}	
		}

	
//	Method to add expenses
	public static void addExpenses(WebDriver driver, String day, String month, 
			String year, String category, String amount, String reason ) {
		goToAddExpensePage(driver);
		fillDay(driver, day);
		fillMonth(driver, month);
		fillYear(driver, year);
		selectCategory(driver, category);
		fillAmount(driver, amount);
		fillReason(driver, reason);
		clickCreateExpense(driver);
	}

	
//	Method to edit the expenses
	public static void editExpenses(WebDriver driver, String day, String month, 
			String year, String category, String amount, String reason) {
		editListedExpenses(driver);
		fillDay(driver, day);
		fillMonth(driver, month);
		fillYear(driver, year);
		selectCategory(driver, category);
		fillAmount(driver, amount);
		fillReason(driver, reason);
		clickCreateExpense(driver);
		Reporter.log("Expense modification is successful", true);
	}
	
}

/* 
 * DataProviderClass : This class is used to provide input data for TestClass and TestClass1
 * to execute the different test cases that are defined in TestClass, and TestClass1.
 * 
 * This class mainly contains below methods to provide input data to different test cases.
 * 1) getnewUserData() : To provide data for new user registration to the expense tracker.
 * 2) getLoginData() : To provide data to login to the expense tracker.
 * 3) getCategoryData() : To provide data to create new categories of expenses in the expense tracker.
 * 4) getExpensesData() : To provide data to create expenses in the expense tracker.
 * 5) getEditUserData() : To provide data to edit user account details.
 * 
 * Refer instructions provided above each method in this class to provide different 
 * set of data to validate the expense tracker.
 */

package testClassPackage;

import org.testng.annotations.DataProvider;

public class DataProviderClass {
	
//*******************************************************************************************************	
	/*
	 * Provide data in the below given format for new user registration
	 * {"User Name", "Password", "Confirm Password"}
	 * 
	 * Here new user registration form is validated with three sets of data to show the following results.
	 * 1) To register to the expense tracker.
	 * 2) To show that two people cannot have same user name.
	 * 3) To show that new user registration with user name and mismatch in password 
	 *    and confirm password will fail to register
	 */
	
	@DataProvider(name = "newUserData")
	public static Object[][] getnewUserData() {
		return new Object[][] {
			{"Ramesh", "pass1", "pass1"},
			{"Ramesh", "1234", "1234"},
			{"Ramesh1", "1234", "abcd"}
			};
	}
	
	
//*******************************************************************************************************
	/*
	 * Provide data in the below given format to login to expense tracker.
	 * {"User Name", "Password"}
	 * 
	 * Here login form is validated with three sets of data to show the following results.
	 * 1) Login to the expense tracker is successful with valid credentials.
	 * 2) Login to expense tracker will fail with invalid user name.
	 * 3) Login to expense tracker will fail with invalid password.
	 */
	
	@DataProvider(name ="loginData")
	public static Object[][] getLoginData() {
		return new Object[][] { 
			{"Ramesh", "pass1"},
			{"wrongusername", "pass1"},
			{"Ramesh", "wrongpassword"}
			};
	}
	
//*******************************************************************************************************	

	
//*******************************************************************************************************
	
	/*
	 * Provide data in the below given format to add category of expenses.
	 * {"category of expenses"}
	 */
	@DataProvider(name ="categories")
	public static Object[][] getCategoryData() {
		return new Object[][] {
			{"bmw"},
			{"honda"},
			{"audi"},
			{"benz"},
			{"Home loan"},
			{"education loan"},
			{"school fee"},
			{"hostel fee"}
			};
	}
	
	
//*******************************************************************************************************
	/*
	 * Provide data in the below given format to add expenses to the tracker.
	 * {"day", "month", "year", "category", "amount", "reason"}
	 */
	
	@DataProvider(name ="getExpensesData")
	public static Object[][] getExpensesData() {
		return new Object[][] {
			{"13", "10", "2000", "honda", "200", "Purchaged"},
			{"13", "10", "2000", "bmw", "200", "Purchaged"},
			{"13", "10", "2000", "audi", "200", "Purchaged"},
			{"13", "11", "2010", "benz", "200", "Purchaged"},
			{"13", "11", "2010", "school fee", "200", "Barrowed"},
			{"13", "11", "2010", "education loan", "200", "Barrowed"},
			{"13", "12", "2011", "school fee", "200", "Paid"},
			{"13", "12", "2011", "hostel fee", "200", "Paid"},
			{"13", "10", "2012", "honda", "200", "Purchaged"},
			{"13", "10", "2012", "bmw", "200", "Purchaged"},
			{"13", "10", "2012", "audi", "200", "Purchaged"},
			{"13", "11", "2013", "benz", "200", "Purchaged"}
			};
	}
	

	
//*******************************************************************************************************	
	
	/*
	 * Provide data in the below given format to edit the user account details
	 * {"Old password", "New Password", "Repeat new Password"}
	 * 
	 * Here edit user account form is validated to show the following results.
	 * 1) To change password with all valid inputs.
	 * 2) To show that password change requires old password field to be filled
	 * 3) To show that password change requires new password field to be filled
	 * 4) To show that password change requires repeat new password field to be filled
	 * 5) To show that password change requires new password and  repeat new password should match
	 */
	
	@DataProvider(name = "editUserData")
	public static Object[][] getEditUserData() {
		return new Object[][] {
			{"pass1 ", " ", "pass2"}, 
			{"pass1", "pass2", " "}, 
			{" ", "pass2", "pass2"},
			{"pass1", "pass2", "pass3"},
			{"pass1", "pass2", "pass2"}
			};
	}
	
}


/*
 * TestClass for new user and login page validation with valid and invalid credentials.
 * Test cases are reading data from DataProviderClass and performing action.
 * please refer DataProviderClass for different sets of input data
 * Test cases will pass when valid credentials are provided
 * Test cases will fail when invalid credentials are given
 */

package testClassPackage;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.Test;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import pageObjectsPackage.LoginPage;
import pageObjectsPackage.NewUserRegistrationPage;
import java.util.concurrent.TimeUnit;


public class TestClass {
	public static WebElement element = null;
	String baseUrl;
	WebDriver driver;
	
	
	@BeforeMethod
	public void SetUp() {
		baseUrl = "http://thawing-shelf-73260.herokuapp.com/";
		System.setProperty("webdriver.gecko.driver", "/C:/Users/HP/Documents/workspace/geckodriver.exe");
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
		driver.manage().window().maximize();
		driver.get(baseUrl);
	}

	
//*****************************************************************************************************	
	/*
	 * Test cases based on User story-007:- 
	 * As a user concerned about security and interested in personal finance, 
	 * user can registered in order to have access to the expense tracker functionalities.
	 */
	
	@Test(dataProvider="newUserData", dataProviderClass=DataProviderClass.class)
	public void testcase1_create_new_user(String username, String password, String confirmpassword) {
			NewUserRegistrationPage.newUserRegistration(driver, username, password, confirmpassword);		
	}
	
	
	
//*****************************************************************************************************	
	/*
	 * Test cases based on User story-006:- 
	 * As a user concerned about security, user can access to all functionalities 
	 * related to expense tracking if he/she is a registered user and logged in.
	 */
	
	@Test(dataProvider="loginData", dataProviderClass=DataProviderClass.class)
	public void testcase2_login_to_tracker(String username, String password) {
		LoginPage.loginToExpenseTracker(driver, username, password);
	}

//*****************************************************************************************************	

	
	@AfterMethod
	public void tearDown() {
		driver.quit();
	}
}

/*
 * TestClass1 : To add/edit/delete Expenses, add/edit/delete category and user credentials update validation.
 * Test cases are reading data from DataProviderClass and performing action.
 * Please refer DataProviderClass for different sets of input data.
 */

package testClassPackage;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.Test;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import pageObjectsPackage.AddExpensesPage;
import pageObjectsPackage.ListCategoryPage;
import pageObjectsPackage.ListExpensesPage;
import pageObjectsPackage.LoginPage;
import pageObjectsPackage.EditUserAccount;
import java.util.concurrent.TimeUnit;


public class TestClass1 {
	public static WebElement element = null;
	String baseUrl;
	WebDriver driver;
	
	@BeforeClass
	public void SetUp() {
		baseUrl = "http://thawing-shelf-73260.herokuapp.com/";
		System.setProperty("webdriver.gecko.driver", "/C:/Users/HP/Documents/workspace/geckodriver.exe");
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		driver.manage().window().maximize();
		driver.get(baseUrl);
		LoginPage.loginToExpenseTracker(driver, "Ramesh", "pass1");
	}

//*********************************************************************************************************	
		/*
		 * Test cases based on User story-004: 
		 * As a personal finance lover, user can manage the categories I can use to classify my expenses.
		 */
		
		@Test(enabled=true, dataProvider="categories", dataProviderClass=DataProviderClass.class)
		public void testcase1_create_category(String category) {
			ListCategoryPage.listCategories(driver, category);
		}
		
		@Test(enabled=true)
		public void testcase2_edit_category() {
			ListCategoryPage.editCategories(driver, "Chicken");
		}
		
		@Test(enabled=true)
		public void testcase3_delete_category() {
			ListCategoryPage.deleteCategories(driver);
		}
	
	
	
//***********************************************************************************************************	
	/*
	 * Test cases based on User story-002: 
	 * As a personal finance lover, user can track all his/her expenses in an easy way.
	 * Here test case is reading input data from DataProviderclass to create expenses
	 */
	
	@Test(enabled=true, dataProvider="getExpensesData", dataProviderClass=DataProviderClass.class)
	public void testcase4_add_expenses(String day, String month, String year, 
			String category, String amount, String reason) {
		AddExpensesPage.addExpenses(driver, day, month, year, category, amount, reason);
	}


	
//***********************************************************************************************************	
	/*
	 * Test cases based on User story-003: 
	 * As a personal finance lover, User can manage the expenses that he/she has already registered.
	 */
	
	@Test(enabled=true)
	public void testcase5_edit_expenses() {
		AddExpensesPage.editExpenses(driver, "14", "10", "2018", "bmw", "5000", "edited_expense");		
	}
	
	@Test(enabled=true)
	public void testcase6_delete_expenses() {
		ListExpensesPage.deleteListedExpenses(driver);
	}
	
	
	
//***********************************************************************************************************	
	/*
	 * Test cases based on User story-001: 
	 * As a personal finance lover, user can see all his/her expenses in one single place.
	 * Here user expenses are listed to confirm that user can see all his finance details
	 * in one single page.
	 */
	
	@Test(enabled=true)
	public void testcase7_list_expenses() {
		ListExpensesPage.ListExpenses(driver);	
	}
	
	
	
//************************************************************************************************************		
	/*
	 * Test cases based on user story-008
	 * Here edit user account is validated with different set of inputs that are provided through DataProviderClass
	 * Please refer DataProviderClass for different set of inputs.
	 */
	
	@Test(enabled=true, dataProvider="editUserData", dataProviderClass=DataProviderClass.class)
	public void testcase8_edit_user_account(String Oldpassword, String newpassword, String Repeatpassword) {
		EditUserAccount.editUserAccount(driver, Oldpassword, newpassword, Repeatpassword );
	}
	
	@Test(enabled=true)
	public void testcase9_edit_user_name() {
		EditUserAccount.validateEditUserName(driver, "EditUserName");
	}
	
//************************************************************************************************************	
	
	@AfterClass
	public void tearDown() {
		driver.quit();
	}
}
